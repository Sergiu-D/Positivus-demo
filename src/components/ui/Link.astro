---
import { cn } from "@/lib/utils";
import ArrowIcon from "@/assets/arrow.svg";

export interface Props extends Omit<astroHTML.JSX.AnchorHTMLAttributes, 'class'> {
  variant?:
    | "default"
    | "secondary"
    | "outlined"
    | "ghostPrimary"
    | "ghostSecondary";

  color?: "dark" | "white" | "main";
  /** Button size */
  size?: "fit" | "full";
  /** Additional CSS classes */
  class?: string;
}

const {
  variant = "default",
  color = "dark",
  size = "fit",
  class: className,
  ...attrs
} = Astro.props as Props;

const variants = {
  default: "bg-primary flex items-center text-white rounded-xl btn-default",
  secondary:
    "bg-secondary flex items-center text-primary rounded-xl btn-secondary",
  outlined:
    "bg-transparent flex items-center text-primary border border-primary rounded-xl btn-outlined",
  ghostPrimary: {
    dark: "bg-transparent flex items-center justify-center gap-2 text-mob-p lg:text-p btn-ghost [&_svg]:fill-primary [&_.iconBg]:bg-secondary [&_.iconBg]:p-2 [&_.iconBg]:rounded-full cursor-pointer cursor-pointer",
    white:
      "bg-transparent flex items-center justify-center gap-2 text-mob-p lg:text-p btn-ghost [&_svg]:fill-primary [&_.iconBg]:bg-white [&_.iconBg]:p-2 [&_.iconBg]:rounded-full cursor-pointer",
  },
  ghostSecondary: {
    main: "bg-transparent flex gap-2 items-center justify-center flex-row-reverse text-secondary [&_svg]:fill-secondary btn-ghost cursor-pointer",
    dark: "bg-transparent flex gap-2 items-center justify-center flex-row-reverse text-primary [&_svg]:fill-primary btn-ghost cursor-pointer",
    white:
      "bg-transparent flex gap-2 items-center justify-center flex-row-reverse text-white [&_svg]:fill-white btn-ghost cursor-pointer",
  },
};

const sizes = {
  fit: "px-5 py-3 w-fit",
  full: "px-5 py-3 w-full",
};

const variantsClasses =
  variant === "default" || variant === "secondary" || variant === "outlined"
    ? variants[variant]
    : variants[variant][color as keyof (typeof variants)[typeof variant]];
---

<a class={cn(variantsClasses, sizes[size], className, "link")} {...attrs}>
  {
    (variant === "ghostPrimary" || variant === "ghostSecondary") && (
      <div class="iconBg overflow-hidden">
        <ArrowIcon class="w-4 h-4 icon" />
      </div>
    )
  }
  <slot />
</a>

<script>
  import { animate, hover } from "motion";

  hover(".link", (element) => {
    const icon = element.querySelector(".icon");

    if (!icon) return;

    // First animation
    animate(icon, { x: 70, y: -50, opacity: 0 }, { duration: 0.2 })
      .then(() => {
        // Second animation - chained after first completes
        return animate(icon, { x: -70, y: 50 }, { duration: 0.1 });
      })
      .then(() => {
        // Third animation - chained after second completes
        return animate(icon, { x: 0, y: 0, opacity: 1 }, { duration: 0.2 });
      });

  });
</script>
